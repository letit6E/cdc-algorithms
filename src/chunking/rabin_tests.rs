use super::chunker::Chunker;
use super::rabin::ChunkerRabin;

const seed: u32 = 0;
const alpha: u32 = 1_664_525;

#[test]
fn test_random_data() {
    let data: Vec<u8> = vec![
        64, 229, 155, 85, 19, 148, 34, 203, 75, 89, 140, 164, 236, 47, 104, 56, 29, 9, 187, 69,
        232, 24, 139, 162, 18, 254, 185, 42, 80, 61, 152, 132, 135, 239, 39, 14, 249, 132, 222, 83,
        18, 101, 52, 49, 202, 171, 182, 217, 49, 12, 75, 102, 17, 111, 86, 25, 156, 106, 136, 23,
        134, 129, 121, 3, 46, 16, 169, 194, 93, 99, 114, 67, 198, 180, 94, 77, 7, 135, 210, 177, 2,
        69, 150, 77, 233, 13, 74, 149, 191, 91, 32, 110, 28, 89, 80, 177, 232, 18, 106, 91,
    ];
    let avg_size: usize = 9;
    let result = (ChunkerRabin::new(avg_size, seed, alpha)).chunk(&data);

    assert_eq!(result, vec![5, 9, 40, 67, 76, 93, 100]);
}

#[test]
fn test_empty_data() {
    assert_eq!(
        (ChunkerRabin::new(15, seed, alpha)).chunk(&Vec::new()),
        vec![] as Vec<usize>
    );
}

#[test]
fn test_another() {
    let data: Vec<u8> = vec![
        74, 189, 94, 23, 151, 33, 185, 26, 51, 94, 239, 46, 9, 87, 8, 218, 81, 65, 187, 254, 206,
        68, 176, 176, 175, 154, 203, 1, 79, 133, 248, 90, 51, 62, 40, 9, 152, 83, 239, 156, 102,
        251, 19, 66, 152, 93, 28, 104, 166, 170, 105, 236, 55, 194, 1, 77, 160, 87, 148, 17, 168,
        212, 223, 84, 145, 48, 33, 105, 147, 61, 47, 240, 163, 133, 172, 242, 106, 121, 175, 172,
        74, 189, 94, 23, 151, 33, 185, 26, 51, 94, 239, 154, 157, 46, 241, 181, 71, 24, 207, 89,
    ];
    let avg_size: usize = 9;
    let result = (ChunkerRabin::new(avg_size, seed, alpha)).chunk(&data);

    assert_eq!(result, vec![6, 17, 22, 24, 29, 38, 42, 79, 84, 100]);
}
